===start
Hello @[playername]@, this is a test conversation.
Chose a reply to test various aspects of simple dialogs
>npcvars:Test variables set by the npc mod that implements simple_dialogs
>setvars:I'd like to test setting variables
>iftest:using :If to set things conditionaly based on variables values
>weight:multiple possible outcomes (weighted tags)
>errors:Test to see if we can make simple_dialogs crash?
:set angry=Y
:set FriendList=|superman|spiderman|batman|wonderwoman|
angry and friendlist are set here, but are not used here.  They are used elsewhere.
Note that these lines are ignored by simple_dialogs because they are not a command or a reply,
and they cant be part of the dialog since it comes after the first reply.

===npcvars
The below variables are set in TenPlus1 MOBS REDO.  A different implementation may not have these variables or may have different ones.

My name is @[npcname]@, and my owner is @[owner]@
my hunger is @[food]@, my state is @[state]@, and my health is @[health]@
>start:Back to the start
>setvars:I'd like to test setting variables
>iftest:using :If to set things conditionaly based on variables values

===setvars
This conversation tests setting variables within the dialog itself

the variable location has been set to: @[location]@

The list variable should contain a list of superheroes, with the player name added (using the add function)
Are you on my Friend List? @[FriendList]@

The variable friendlist2 was set to the same as list, but batman was removed with the rmv function
friendlist2=@[friendlist2]@

the variable angry was set in a different tag, but can still be displayed here because variables live for as long as the npc lives.
Am I angry? @[angry]@
:set location=mountains
:set FriendList=add(FriendList,@[playername]@)
:set FriendList2=rmv(FriendList,batman)
>start:Back to the start
>npcvars:Test variables set by the npc mod that implements simple_dialogs
>iftest:using :If to set things conditionaly based on variables values

===iftest
The last line of this dialog will change based on the value of angry
Am I angry right now? @[angry]@
@[mood]@
My friendlist is @[friendlist]@
And what do I think about you? @[friendstatus]@
:set mood=I guess I'm just in a good mood
:if (@[angry]@==Y) then set mood=I'm in a lousy mood today
:if ( (@[angry]@==N) and (isinlist(FriendList,@[playername]@)) ) then set friendstatus=You are my very best friend!
:if ( (@[angry]@==N) and (isinlist(FriendList,@[playername]@)==0) ) then set friendstatus=Hmmm, I don't really know you.
:if ( (@[angry]@==Y) and (isinlist(FriendList,@[playername]@)) ) then set friendstatus=Some friend YOU are
:if ( (@[angry]@==Y) and (isinlist(FriendList,@[playername]@)==0) ) then set friendstatus=I HATE you!
>angry:Make them angry!
>happy:Make them not angry.
>addplayer:Add player to friend list
>rmvplayer:Remove player from friend list
>start:Back to the start
>npcvars:Test variables set by the npc mod that implements simple_dialogs
>setvars:I'd like to test setting variables


===angry
Ohhh!  That makes me so ANGRY!  angry=@[angry]@
:set angry=Y
>iftest:back to using :If to set things conditionaly based on variables values

===happy
Well, that was nice of you, I feel much better now!  angry=@[angry]@
:set angry=N
>iftest:back to using :If to set things conditionaly based on variables values

===addplayer
Well, I guess I'll just put your name in my little black book as a friend.
:set FriendList=add(FriendList,@[playername]@)
>iftest:back to using :If to set things conditionaly based on variables values

===rmvplayer
I am erasing your name from my little black book!  You are no longer my friend!
:set FriendList=rmv(FriendList,@[playername]@)
>iftest:back to using :If to set things conditionaly based on variables values

===weight
Its possible to have multiple tags with the same name.  When you do, simple dialogs will choose randomly between them.
So, for example, this test npc has 2 tags for "puppy" and 3 tags "treasure"
The two tags for puppy do not have a weight, so if you select puppy below, there is a 50/50 chance of you getting either response.
BUT, the three tags for "treasure" are weighted.  That means the tags have a number after them like this:
  ==treasure(1)
  ==treasure(3)
  ==treasure(5)
So when you select "treasure" below, simple dialogs rolls a random number between 1 and 9.  If the result is 1, you get the first response.  If the result is 2, 3, or 4, you get the second.  And if the result is between 5 and 9 you will get the third one.
Try it below.
>puppy:I want to pet the puppy!
>treasure:I want to look for treasure!

===puppy
The puppy shivers from tip of his nose all the way back to the tip of his tail and gives one sharp bark of pure joy.
>puppy:Pet the puppy again!
>weight:Back to the multiple possible outcomes (weighted tags)
>start:Back to the very beginning.

===puppy
The puppy wags his tail and then runs around you in a circle, coming back to right in front of you, where it sits and waits anxiously for another petting!
>puppy:How can I resist?  I pet the puppy again of course!
>weight:Back to the multiple possible outcomes (weighted tags)
>start:Back to the very beginning.

===treasure(1)
Well, hmmm.  Why not, you seem like a nice person @[playername]@.  I WILL give you the treasure map!
(this is the entry with treasure(1) you will only see it about 1 out of 9 times)
>treasure:That is GREAT, now hand that map over!
>weight:Back to the multiple possible outcomes (weighted tags)
>start:Back to the very beginning.

===treasure(3)
I don't think so.  That treasure is nothing but trouble.  I'm not just going to hand it over to some landlubber who will just get themselves lost looking for it.
(this is the entry with treasure(3) you will see it about 3 out of 9 times)
>treasure:Will you give me the treasure if I ask PRETTY PLEASE?, With Sugar On Top?
>weight:Back to the multiple possible outcomes (weighted tags)
>start:Back to the very beginning.

===treasure(5)
Nope, not a chance.  It's MY treasure, you will never get your grubby paws on it!
(this is the entry with treasure(5) you will see it about 5 out of 9 times, by far most often)
>treasure:I said give me the treasure map!
>weight:Back to the multiple possible outcomes (weighted tags)
>start:Back to the very beginning.

===errors
This dialog's purpose it to try everything I can think of to make simple_dialogs crash.
how about using the calc function to divide by zero=calc(3/0)
or just crazy bad calc function with not mathematical symbols and bad variables=calc(M/3+@[doesnotexist]@-@[friendlist]@()(@[angry]@))
how about functions with messed up or incomplete parens add(rmv(calc(  and some other garbage here
next we will try variables that do not exist @[doesnotexist]@
variables that are not closed correctly @[badvariable@
nested bad variables will not crash, @[nested@[badvariable]@]@ @[nested@[friendlist]@]@
nor will recursive variable attempts @[var1]@ @[@[var3]@]@ @[var2]@ @[var4]@@[var5]@

below we will also have a bad command, empty set and bad set
and some bad if statements
All of this should be ignored and none of it should cause a crash
:set var1=var2
:set var2=@[var1]@
:set var3=var1
:set var4=@[var
:set var5=5]@
:badcommand nothing here should matter
:set
:set =3
:set @[var6]@=calc(3/0)
:set var7=@[doesnotexist]@
:set var8=calc(isinlist()
:if
:if @[var5]@>=x then
:if @[var5]@<=x
:if @[var5]@>x then badcommand
:if @[doesnotexist]@==flaming@[doesnotexist]@@[var2]@@[var5]@ calc(3/0)
>tagwithnoreplies:test if a tag with no replies will crash
>tagwithnodialog:test if a tag with no dialog will crash
>doesnotexist:test if a reply target pointing at a tag that does not exist will crash.
>start:Back to the very beginning.

===tagwithnoreplies
What happens if you have a tag with no replies?
(an END reply is automagically added)

===tagwithnodialog
>errors:back to primary error dialog
>start:Back to the very beginning.

